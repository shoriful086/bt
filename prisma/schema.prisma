// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(uuid())
  name        String
  email       String     @unique
  phoneNumber String     @unique
  password    String
  role        UserRole
  status      UserStatus
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  appUser AppUser?
  admin   Admin?

  @@map("users")
}

model Admin {
  id    String @id @default(uuid())
  name  String
  email String @unique

  phoneNumber String @unique

  user User @relation(fields: [phoneNumber], references: [phoneNumber])

  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model AppUser {
  id    String @id @default(uuid())
  name  String
  email String @unique

  phoneNumber String @unique
  user        User   @relation(fields: [phoneNumber], references: [phoneNumber])

  balance                 Float                     @default(0)
  depositBalance          Float                     @default(0)
  referIncome             Float                     @default(0)
  earnedForAd             Float                     @default(0)
  earnForSpin             Float                     @default(0)
  isDeleted               Boolean                   @default(false)
  referrelCode            String
  refererBy               String?
  referLink               String
  deviceToken             String?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  refer                   Refer[]
  deposit                 Deposit[]
  withdraw                Withdraw[]
  buyPackage              BuyPackage[]
  completeTask            CompleteTask[]
  luckySpins              LuckySpins[]
  bet                     Bet[]
  userDashboardMetaData   UserDashboardMetaData[]
  referBonusClaimed       ReferBonusClaimed[]
  targetReferBonusClaimed TargetReferBonusClaimed[]

  @@map("appUsers")
}

model Refer {
  id                  String      @id @default(uuid())
  referUsedUserNumber String
  referrer            AppUser     @relation(fields: [referUsedUserNumber], references: [phoneNumber])
  referCode           String      @default("1234")
  status              ReferStatus
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt()

  @@map("refers")
}

model SignUpBonus {
  id          String @id @default(uuid())
  bonusAmount Float  @default(0)

  @@map("signup_bonuses")
}

model PaymentMethod {
  id         String   @id @default(uuid())
  name       String
  number     String
  icon       String
  minPayment String
  maxPayment String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("payment_methods")
}

model WithdrawMethod {
  id         String   @id @default(uuid())
  name       String
  icon       String
  minPayment String
  maxPayment String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("withdraw_methods")
}

model Deposit {
  id            String        @id @default(uuid())
  phoneNumber   String
  number        AppUser       @relation(fields: [phoneNumber], references: [phoneNumber])
  paymentNumber String
  paymentMethod String
  amount        Float
  trxId         String
  depositStatus DepositStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("deposits")
}

model DepositBonus {
  id           String @id @default(uuid())
  depositBonus Float  @default(0)

  @@map("deposit_bonuses")
}

model Withdraw {
  id                    String         @id @default(uuid())
  phoneNumber           String
  number                AppUser        @relation(fields: [phoneNumber], references: [phoneNumber])
  paymentReceivedNumber String
  paymentMethod         String
  amount                Float
  withdrawStatus        WithdrawStatus @default(PENDING)
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt

  @@map("withdraws")
}

model ReferCommission {
  id              String @id @default(uuid())
  commissionBonus Float  @default(0)

  @@map("refer_commissions")
}

model Package {
  id           String         @id @default(uuid())
  name         String
  price        Float
  dailyAds     Float
  validity     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt()
  buyPackage   BuyPackage[]
  completeTask CompleteTask[]

  @@map("packages")
}

model BuyPackage {
  userNumber String
  user       AppUser  @relation(fields: [userNumber], references: [phoneNumber])
  pakcageId  String
  package    Package  @relation(fields: [pakcageId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()

  @@id([userNumber, pakcageId])
  @@map("buy_packages")
}

model CompleteTask {
  id         String  @id @default(uuid())
  userNumber String
  user       AppUser @relation(fields: [userNumber], references: [phoneNumber])

  packageId String
  package   Package @relation(fields: [packageId], references: [id])

  packageName String
  earned      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()

  @@map("complete_tasks")
}

model Ads {
  id    String @id @default(uuid())
  price Float  @default(0)

  @@map("ads")
}

model Banner {
  id          String   @id @default(uuid())
  bannerImage String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()

  @@map("banners")
}

model PaymentNotices {
  id                           String @id @default(uuid())
  depositFirstPageNotice       String
  depositSecondPageNoticeBkash String
  depositSecondPageNoticeNagad String
  withdrawPageNotice           String

  @@map("payment_notice")
}

model Bet {
  id         String  @id @default(uuid())
  userNumber String
  user       AppUser @relation(fields: [userNumber], references: [phoneNumber])
  amount     Float   @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@map("bets")
}

model LuckySpins {
  id         String  @id @default(uuid())
  userNumber String
  user       AppUser @relation(fields: [userNumber], references: [phoneNumber])
  spinLabel  String
  spinAmount String
  winAmount  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@map("lucky_spins")
}

model UserDashboardMetaData {
  id          String   @id @default(uuid())
  amount      Float
  phoneNumber String
  user        AppUser  @relation(fields: [phoneNumber], references: [phoneNumber])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()

  @@map("user_dashboard_meta_data")
}

model PrivateNumber {
  id                String   @id @default(uuid())
  number            String   @unique
  count             Float    @default(0)
  copyDurationCount Float    @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt()

  @@map("private_number")
}

model ReferBonus {
  id                 String   @id @default(uuid())
  inviteFriendLength String
  bonusAmount        Float    @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt()

  @@map("refer_bonus")
}

model ReferBonusClaimed {
  id         String   @id @default(uuid())
  userNumber String
  user       AppUser  @relation(fields: [userNumber], references: [phoneNumber])
  amount     Float
  referCount String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()

  @@map("refer_bonus_claimed")
}

model WheelMultiply {
  id        String   @id @default(uuid())
  multiply  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Notice {
  id        String   @id @default(uuid())
  notice    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@map("notice")
}

model TargetRefer {
  id                  String   @id @default(uuid())
  targetReferQuantity String
  bonusAmount         String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt()

  @@map("target_refers")
}

model TargetReferBonusClaimed {
  id              String  @id @default(uuid())
  userPhoneNumber String
  user            AppUser @relation(fields: [userPhoneNumber], references: [phoneNumber])
  referCount      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@map("target_refer_bonus_claimed")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  APP_USER
  DEVELOPER
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum ReferStatus {
  PENDING
  SUCCESS
}

enum DepositStatus {
  PENDING
  SUCCESS
  REJECTED
}

enum WithdrawStatus {
  PENDING
  PAID
}
